
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ######################## Uber and Lyft Rides in Chicago ########################
> ################################## Estimation ##################################
> 
> options(scipen=999)
> 
> rm(list=ls())
> invisible(gc())
> 
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.3.5      ✔ purrr   0.3.4 
✔ tibble  3.1.6      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.4.0 
✔ readr   2.1.3      ✔ forcats 0.5.2 
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> 
> df <- readr::read_csv("data/chicagoRidesCleaned.csv")
Rows: 18286364 Columns: 22
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr   (3): trip_id, origin_destination_pairs, trip_weekday_hour
dbl  (16): trip_seconds, trip_miles, pickup_community_area, dropoff_communit...
dttm  (2): trip_start_timestamp, trip_end_timestamp
date  (1): trip_start_date

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> # df <- df %>%
> #   filter(trip_start_date < '2019-07-21')
> 
> 
> df <- df %>%
+   sample_n(890000)
> 
> 
> ##### Descriptives #####
> 
> n_sample <- nrow(df)
> df %>%
+   group_by(shared_trip_authorized) %>%
+   summarise(
+     fare_mean = mean(fare),
+     fare_sd = sd(fare),
+     tip_mean = mean(tip),
+     tip_sd = sd(tip),
+     tip_dummy_mean = mean(tip_dummy),
+     tip_dummy_sd = sd(tip_dummy),
+     n = n(),,
+     share = n()/n_sample
+   ) %>%
+   print(width=Inf)
# A tibble: 2 × 9
  shared_trip_authorized fare_mean fare_sd tip_mean tip_sd tip_dummy_mean
                   <dbl>     <dbl>   <dbl>    <dbl>  <dbl>          <dbl>
1                      0     10.4     7.00    0.704  1.65           0.229
2                      1      8.79    5.57    0.254  0.852          0.114
  tip_dummy_sd      n share
         <dbl>  <int> <dbl>
1        0.420 785069 0.882
2        0.318 104931 0.118
> 
> n_sample_sharing <- sum(df$shared_trip_authorized == 1)
> df %>%
+   filter(shared_trip_authorized == 1) %>%
+   group_by(shared_trip) %>%
+   summarise(
+     fare_mean = mean(fare),
+     fare_sd = sd(fare),
+     tip_mean = mean(tip),
+     tip_sd = sd(tip),
+     tip_dummy_mean = mean(tip_dummy),
+     tip_dummy_sd = sd(tip_dummy),
+     n = n(),
+     share = n()/n_sample_sharing
+   ) %>%
+   print(width=Inf)
# A tibble: 2 × 9
  shared_trip fare_mean fare_sd tip_mean tip_sd tip_dummy_mean tip_dummy_sd
        <dbl>     <dbl>   <dbl>    <dbl>  <dbl>          <dbl>        <dbl>
1           0      8.30    5.17    0.259  0.864          0.118        0.322
2           1      9.02    5.74    0.252  0.846          0.112        0.316
      n share
  <int> <dbl>
1 33398 0.318
2 71533 0.682
> 
> 
> 
> ##### Seemingly unrelated regressions #####
> 
> pval <- function(coef, cv, se, df){
+   
+   q = (coef-cv) / se
+   
+   p <- pt(
+     q = q,
+     df = df,
+     lower.tail = !(q > 0)
+   )*2
+   
+   return(p)
+   
+ }
> 
> df$trip_start_date <- as.factor(df$trip_start_date)
> df$trip_hour <- as.factor(df$trip_hour)
> df$trip_weekday_hour <- as.factor(df$trip_weekday_hour)
> df$origin_destination_pairs <- as.factor(df$origin_destination_pairs)
> 
> 
> # first stage
> f1 <- formula(shared_trip ~ shared_trip_authorized + fare + trip_start_date + trip_hour + trip_weekday_hour + origin_destination_pairs)
> # second stage
> f2 <- formula(tip_dummy ~ shared_trip + shared_trip_authorized + fare + trip_start_date + trip_hour + trip_weekday_hour + origin_destination_pairs)
> 
> 
> # define chunk size
> n <- 100000
> k <- ceiling(n_sample/n)
> 
> # first model fit
> ch <- df[1:n,]
> model_f1 <- biglm::biglm(f1, ch)
> model_f2 <- biglm::biglm(f2, ch)
> rm(ch); invisible(gc())
> 
> # subsequent model fits
> for (i in 2:(k-1)){
+   
+   ch <- df[((i-1)*n+1):(i*n),]
+   model_f1 <- update(model_f1, ch)
+   model_f2 <- update(model_f2, ch)
+   
+   rm(ch); invisible(gc())
+   print(i/k*100)
+   
+ }
[1] 22.22222
[1] 33.33333
[1] 44.44444
[1] 55.55556
[1] 66.66667
[1] 77.77778
[1] 88.88889
> 
> # final model fit
> ch <- df[((k-1)*n+1):n_sample,]
> model_f1 <- update(model_f1, ch)
> model_f2 <- update(model_f2, ch)
> 
> rm(ch); invisible(gc())
> 
> 
> # model_f1 <- biglm::biglm(f1, df)
> model_f1_summary <- summary(model_f1)
> se_f1 <- sqrt(diag(vcov(model_f1)))
> 
> # model_f2 <- biglm::biglm(f2, df)
> model_f2_summary <- summary(model_f2)
> se_f2 <- sqrt(diag(vcov(model_f2)))
> 
> 
> coef(model_f1)[c("(Intercept)", "shared_trip_authorized", "fare")]
           (Intercept) shared_trip_authorized                   fare 
           0.006491833            0.667601931           -0.001832762 
> se_f1[c("(Intercept)", "shared_trip_authorized", "fare")]
           (Intercept) shared_trip_authorized                   fare 
         0.00595539172          0.00060302516          0.00005598068 
> model_f1_summary$rsq
[1] 0.6171124
> coef(model_f2)[c("(Intercept)", "shared_trip", "shared_trip_authorized", "fare")]
           (Intercept)            shared_trip shared_trip_authorized 
            0.11770707            -0.01319467            -0.07399361 
                  fare 
            0.00492459 
> model_f2_summary$rsq
[1] 0.03885534
> se_f2[c("(Intercept)", "shared_trip", "shared_trip_authorized", "fare")]
           (Intercept)            shared_trip shared_trip_authorized 
          0.0138077897           0.0024637879           0.0021587599 
                  fare 
          0.0001298716 
> 
> 
> # computation of ATE by multiplying coefficients
> ate_fd <- as.numeric(coef(model_f1)["shared_trip_authorized"] * coef(model_f2)["shared_trip"])
> # get variance-covariance matrix of coefficients (covariance=0)
> ate_fd_cov <- matrix(c(se_f1["shared_trip_authorized"]^2, 0, 0, se_f2["shared_trip"]^2), nrow=2)
> # get jacobian for Delta-method
> jacobian <- as.matrix(c(coef(model_f2)["shared_trip"], coef(model_f1)["shared_trip_authorized"]))
> # apply Delta-method to compute ATE standard error
> ate_fd_se <- sqrt(t(jacobian) %*% ate_fd_cov %*% jacobian)
> # degrees of freedom
> d_free <- n_sample*2 - length(model_f1_summary[["obj"]][["names"]]) - length(model_f2_summary[["obj"]][["names"]])
> 
> cat(
+   'ATE: ', round(ate_fd, 4),
+   '\nse(ATE): ', round(ate_fd_se, 4),
+   '\np-value(ATE = 0): ', round(pval(coef=ate_fd, cv=0, se=ate_fd_se, df=d_free), 4)
+ )
ATE:  -0.0088 
se(ATE):  0.0016 
p-value(ATE = 0):  0> 
> 
> 
> 
> 
> 
> proc.time()
     user    system   elapsed 
11333.107    96.816 11410.045 
