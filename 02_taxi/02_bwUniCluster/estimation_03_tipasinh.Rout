
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ######################## Uber and Lyft Rides in Chicago ########################
> ################################## Estimation ##################################
> 
> options(scipen=999)
> 
> rm(list=ls())
> invisible(gc())
> 
> 
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.3.5      ✔ purrr   0.3.4 
✔ tibble  3.1.6      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.4.0 
✔ readr   2.1.3      ✔ forcats 0.5.2 
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(fixest)
> 
> set.seed(79)
> 
> pval <- function(coef, cv, se, df){
+   
+   q = (coef-cv) / se
+   
+   p <- pt(
+     q = q,
+     df = df,
+     lower.tail = !(q > 0)
+   )*2
+   
+   return(p)
+   
+ }
> 
> 
> df <- readr::read_csv("data/chicagoRidesCleaned.csv")
Rows: 18286364 Columns: 22
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr   (3): trip_id, origin_destination_pairs, trip_weekday_hour
dbl  (16): trip_seconds, trip_miles, pickup_community_area, dropoff_communit...
dttm  (2): trip_start_timestamp, trip_end_timestamp
date  (1): trip_start_date

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> 
> ### definition of criteria ###
> 
> # define chunk size
> n_sample <- 15000000
> 
> df <- df %>%
+   sample_n(n_sample)
> 
> n <- 500000
> k <- ceiling(n_sample/n)
> 
> 
> 
> ##### Descriptives #####
> 
> df %>%
+   group_by(shared_trip_authorized) %>%
+   summarise(
+     fare_mean = mean(fare),
+     fare_sd = sd(fare),
+     tip_mean = mean(tip),
+     tip_sd = sd(tip),
+     tip_dummy_mean = mean(tip_dummy),
+     tip_dummy_sd = sd(tip_dummy),
+     n = n(),,
+     share = n()/n_sample
+   ) %>%
+   print(width=Inf)
# A tibble: 2 × 9
  shared_trip_authorized fare_mean fare_sd tip_mean tip_sd tip_dummy_mean
                   <dbl>     <dbl>   <dbl>    <dbl>  <dbl>          <dbl>
1                      0     10.3     6.98    0.705  1.65           0.229
2                      1      8.78    5.58    0.254  0.866          0.114
  tip_dummy_sd        n share
         <dbl>    <int> <dbl>
1        0.420 13239121 0.883
2        0.317  1760879 0.117
> 
> n_sample_sharing <- sum(df$shared_trip_authorized == 1)
> df %>%
+   filter(shared_trip_authorized == 1) %>%
+   group_by(shared_trip) %>%
+   summarise(
+     fare_mean = mean(fare),
+     fare_sd = sd(fare),
+     tip_mean = mean(tip),
+     tip_sd = sd(tip),
+     tip_dummy_mean = mean(tip_dummy),
+     tip_dummy_sd = sd(tip_dummy),
+     n = n(),
+     share = n()/n_sample_sharing
+   ) %>%
+   print(width=Inf)
# A tibble: 2 × 9
  shared_trip fare_mean fare_sd tip_mean tip_sd tip_dummy_mean tip_dummy_sd
        <dbl>     <dbl>   <dbl>    <dbl>  <dbl>          <dbl>        <dbl>
1           0      8.28    5.13    0.259  0.888          0.117        0.321
2           1      9.02    5.77    0.252  0.855          0.112        0.316
        n share
    <int> <dbl>
1  561913 0.319
2 1198966 0.681
> 
> 
> 
> ##### Estimation of ATT #####
> 
> 
> ### data preparation ###
> 
> df$trip_start_date <- as.factor(df$trip_start_date)
> df$trip_hour <- as.factor(df$trip_hour)
> df$trip_weekday_hour <- as.factor(df$trip_weekday_hour)
> df$origin_destination_pairs <- as.factor(df$origin_destination_pairs)
> df$fare_full <- df$trip_total - df$tip
> df$pairs_X_start_date <- as.factor(do.call(paste, c(df[c("origin_destination_pairs", "trip_start_date")], sep="_")))
> 
> 
> 
> ### formulas ###
> 
> # first stage
> f1 <- formula(shared_trip ~ shared_trip_authorized + fare | trip_start_date + trip_hour + trip_weekday_hour + origin_destination_pairs)
> # second stage
> f2 <- formula(tip_asinh ~ shared_trip + shared_trip_authorized +  fare | trip_start_date + trip_hour + trip_weekday_hour + origin_destination_pairs)
> 
> # naive
> f3 <- formula(tip_asinh ~ shared_trip_authorized + fare | trip_start_date + trip_hour + trip_weekday_hour + origin_destination_pairs)
> 
> 
> 
> ### initial model fit ###
> 
> ch <- df[1:n,]
> 
> model_f1 <- fixest::feols(fml = f1, data = ch)
> model_f1_summary <- summary(model_f1, vcov = "iid")
> 
> model_f2 <- fixest::feols(fml = f2, data = ch)
> model_f2_summary <- summary(model_f2, vcov = "iid")
> 
> model_naive <- fixest::feols(fml = f3, data = ch)
> model_naive_summary <- summary(model_naive, vcov = "iid")
> 
> ate_fd <- as.numeric(coef(model_f1)["shared_trip_authorized"] * coef(model_f2)["shared_trip"])
> ate_fd_cov <- matrix(c(model_f1_summary$se["shared_trip_authorized"]^2, 0, 0, model_f2_summary$se["shared_trip"]^2), nrow=2)
> jacobian <- as.matrix(c(coef(model_f2)["shared_trip"], coef(model_f1)["shared_trip_authorized"]))
> ate_fd_se <- sqrt(t(jacobian) %*% ate_fd_cov %*% jacobian)
> 
> d_free_fd <- model_f1$nobs*2 - model_f1$nparams - model_f2$nparams
> ate_fd_p <- pval(coef=ate_fd, cv=0, se=ate_fd_se, df=d_free_fd)
> 
> ate_naive <- coef(model_naive)["shared_trip_authorized"]
> ate_naive_se <- model_naive_summary$se["shared_trip_authorized"]
> d_free_naive <- model_naive$nobs - model_naive$nparams
> ate_naive_p <- pval(coef=ate_naive, cv=0, se=ate_naive_se, df=d_free_naive)
> 
> 
> collection <- data.frame(
+   n = model_f1$nobs,
+   df_fd = d_free_fd,
+   df_naive = d_free_naive,
+   f1_shared_trip_authorized = coef(model_f1)["shared_trip_authorized"],
+   f1_shared_trip_authorized_se = model_f1_summary$se["shared_trip_authorized"],
+   f1_fare = coef(model_f1)["fare"],
+   f1_fare_se = model_f1_summary$se["fare"],
+   f2_shared_trip_authorized = coef(model_f2)["shared_trip_authorized"],
+   f2_shared_trip_authorized_se = model_f2_summary$se["shared_trip_authorized"],
+   f2_shared_trip = coef(model_f2)["shared_trip"],
+   f2_shared_trip_se = model_f2_summary$se["shared_trip"],
+   f2_fare = coef(model_f2)["fare"],
+   f2_fare_se = model_f2_summary$se["fare"],
+   f1_r2 = 1 - (sum(model_f1$residuals^2) / sum((ch$shared_trip - mean(ch$shared_trip))^2)),
+   f2_r2 = 1 - (sum(model_f2$residuals^2) / sum((ch$tip_dummy - mean(ch$tip_dummy))^2)),
+   naive_r2 = 1 - (sum(model_naive$residuals^2) / sum((ch$tip_dummy - mean(ch$tip_dummy))^2)),
+   ate_fd = ate_fd,
+   ate_fd_se = ate_fd_se,
+   ate_fd_p = ate_fd_p,
+   ate_naive = ate_naive,
+   ate_naive_se = ate_naive_se,
+   ate_naive_p = ate_naive_p
+ )
> 
> 
> 
> ### subsequent model fits ###
> 
> for (i in 2:(k-1)){
+   
+   ch <- df[1:(i*n),]
+   
+   model_f1 <- fixest::feols(fml = f1, data = ch)
+   model_f1_summary <- summary(model_f1, vcov = "iid")
+   
+   model_f2 <- fixest::feols(fml = f2, data = ch)
+   model_f2_summary <- summary(model_f2, vcov = "iid")
+   
+   model_naive <- fixest::feols(fml = f3, data = ch)
+   model_naive_summary <- summary(model_naive, vcov = "iid")
+   
+   ate_fd <- as.numeric(coef(model_f1)["shared_trip_authorized"] * coef(model_f2)["shared_trip"])
+   ate_fd_cov <- matrix(c(model_f1_summary$se["shared_trip_authorized"]^2, 0, 0, model_f2_summary$se["shared_trip"]^2), nrow=2)
+   jacobian <- as.matrix(c(coef(model_f2)["shared_trip"], coef(model_f1)["shared_trip_authorized"]))
+   ate_fd_se <- sqrt(t(jacobian) %*% ate_fd_cov %*% jacobian)
+   
+   d_free_fd <- model_f1$nobs*2 - model_f1$nparams - model_f2$nparams
+   ate_fd_p <- pval(coef=ate_fd, cv=0, se=ate_fd_se, df=d_free_fd)
+   
+   ate_naive <- coef(model_naive)["shared_trip_authorized"]
+   ate_naive_se <- model_naive_summary$se["shared_trip_authorized"]
+   d_free_naive <- model_naive$nobs - model_naive$nparams
+   ate_naive_p <- pval(coef=ate_naive, cv=0, se=ate_naive_se, df=d_free_naive)
+   
+   new_collection <- c(
+     model_f1$nobs,
+     d_free_fd,
+     d_free_naive,
+     coef(model_f1)["shared_trip_authorized"],
+     model_f1_summary$se["shared_trip_authorized"],
+     coef(model_f1)["fare"],
+     model_f1_summary$se["fare"],
+     coef(model_f2)["shared_trip_authorized"],
+     model_f2_summary$se["shared_trip_authorized"],
+     coef(model_f2)["shared_trip"],
+     model_f2_summary$se["shared_trip"],
+     coef(model_f2)["fare"],
+     model_f2_summary$se["fare"],
+     1 - (sum(model_f1$residuals^2) / sum((ch$shared_trip - mean(ch$shared_trip))^2)),
+     1 - (sum(model_f2$residuals^2) / sum((ch$tip_dummy - mean(ch$tip_dummy))^2)),
+     1 - (sum(model_naive$residuals^2) / sum((ch$tip_dummy - mean(ch$tip_dummy))^2)),
+     ate_fd,
+     ate_fd_se,
+     ate_fd_p,
+     ate_naive,
+     ate_naive_se,
+     ate_naive_p
+   )
+   
+   collection <- rbind(collection, new_collection)
+   
+   rm(ch); invisible(gc())
+ 
+   write.csv(collection, "data/estimationResultsBaseTipAsinh.csv", row.names = FALSE)
+ 
+   print(model_f1$nobs)
+   
+ }
[1] 1000000
[1] 1500000
[1] 2000000
[1] 2500000
[1] 3000000
[1] 3500000
[1] 4000000
[1] 4500000
[1] 5000000
[1] 5500000
[1] 6000000
[1] 6500000
[1] 7000000
[1] 7500000
[1] 8000000
[1] 8500000
[1] 9000000
[1] 9500000
[1] 10000000
[1] 10500000
[1] 11000000
[1] 11500000
[1] 12000000
[1] 12500000
[1] 13000000
[1] 13500000
[1] 14000000
[1] 14500000
> 
> 
> 
> ### final model fit ###
> 
> ch <- df
> 
> model_f1 <- fixest::feols(fml = f1, data = ch)
> model_f1_summary <- summary(model_f1, vcov = "iid")
> 
> model_f2 <- fixest::feols(fml = f2, data = ch)
> model_f2_summary <- summary(model_f2, vcov = "iid")
> 
> model_naive <- fixest::feols(fml = f3, data = ch)
> model_naive_summary <- summary(model_naive, vcov = "iid")
> 
> ate_fd <- as.numeric(coef(model_f1)["shared_trip_authorized"] * coef(model_f2)["shared_trip"])
> ate_fd_cov <- matrix(c(model_f1_summary$se["shared_trip_authorized"]^2, 0, 0, model_f2_summary$se["shared_trip"]^2), nrow=2)
> jacobian <- as.matrix(c(coef(model_f2)["shared_trip"], coef(model_f1)["shared_trip_authorized"]))
> ate_fd_se <- sqrt(t(jacobian) %*% ate_fd_cov %*% jacobian)
> 
> d_free_fd <- model_f1$nobs*2 - model_f1$nparams - model_f2$nparams
> ate_fd_p <- pval(coef=ate_fd, cv=0, se=ate_fd_se, df=d_free_fd)
> 
> ate_naive <- coef(model_naive)["shared_trip_authorized"]
> ate_naive_se <- model_naive_summary$se["shared_trip_authorized"]
> d_free_naive <- model_naive$nobs - model_naive$nparams
> ate_naive_p <- pval(coef=ate_naive, cv=0, se=ate_naive_se, df=d_free_naive)
> 
> new_collection <- c(
+   model_f1$nobs,
+   d_free_fd,
+   d_free_naive,
+   coef(model_f1)["shared_trip_authorized"],
+   model_f1_summary$se["shared_trip_authorized"],
+   coef(model_f1)["fare"],
+   model_f1_summary$se["fare"],
+   coef(model_f2)["shared_trip_authorized"],
+   model_f2_summary$se["shared_trip_authorized"],
+   coef(model_f2)["shared_trip"],
+   model_f2_summary$se["shared_trip"],
+   coef(model_f2)["fare"],
+   model_f2_summary$se["fare"],
+   1 - (sum(model_f1$residuals^2) / sum((ch$shared_trip - mean(ch$shared_trip))^2)),
+   1 - (sum(model_f2$residuals^2) / sum((ch$tip_dummy - mean(ch$tip_dummy))^2)),
+   1 - (sum(model_naive$residuals^2) / sum((ch$tip_dummy - mean(ch$tip_dummy))^2)),
+   ate_fd,
+   ate_fd_se,
+   ate_fd_p,
+   ate_naive,
+   ate_naive_se,
+   ate_naive_p
+ )
> 
> collection <- rbind(collection, new_collection)
> 
> rm(ch); invisible(gc())
> 
> write.csv(collection, "data/estimationResultsBaseTipAsinh.csv", row.names = FALSE)
> 
> 
> 
> proc.time()
    user   system  elapsed 
1251.418   92.783 1290.181 
